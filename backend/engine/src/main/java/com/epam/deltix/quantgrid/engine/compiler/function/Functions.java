package com.epam.deltix.quantgrid.engine.compiler.function;

import lombok.experimental.UtilityClass;

import java.util.Collection;
import java.util.List;

@UtilityClass
public class Functions {

    private final List<Function> FUNCTIONS = List.of(
            new Function("RANGE", "Generate an array of numbers from 0 to up to count exclusively",
                    new Argument("count", "is how many elements to generate from 0 to up this value exclusively")),
            new Function("INPUT", "Import a table from a file",
                    new Argument("path", "is the location of the file to import from")),
            new Function("FILTER", "Filter a table or an array",
                    new Argument("table_or_array", "the table or  the array to filter"),
                    new Argument("condition", "the condition to filter by")),
            new Function("DISTINCTBY", "Leave only unique rows of a table or unique elements of an array",
                    new Argument("table_or_array", "the table or the array to filter"),
                    new Argument("keys", "the keys to filter by", true)),
            new Function("DISTINCT", "Leave only unique elements of an array",
                    new Argument("array", "the array to filter")),
            new Function("ORDERBY", "Sort a table or an array",
                    new Argument("table_or_array", "the table or the array to sort"),
                    new Argument("keys", "the keys to sort by", true)),
            new Function("FIND", "Find a row of a table by its keys",
                    new Argument("table", "the table to find in"),
                    new Argument("keys", "to match with the source table's keys", true)),
            new Function("FIELDS", "Return fields of a table",
                    new Argument("table", "the table which the fields to come from")),
            new Function("UNPIVOT", "Make a pivot longer table from a table",
                    new Argument("table", "the table to unpivot"),
                    new Argument("new_name_field", "the name of the new field which contains original field names"),
                    new Argument("new_value_field", "the name of the new field which contains original field values"),
                    new Argument("field_condition", "the condition to filter the field names by", false, true)),
            new Function("PIVOT", "Make a pivot wider table from a table",
                    new Argument("table", "the table to pivot"),
                    new Argument("field", "the expression from which make the pivoted fields"),
                    new Argument("aggregation", "to aggregate the values for the pivoted fields")),
            new Function("COUNT", "Count rows of a table or elements of an array",
                    new Argument("table_or_array", "to count")),
            new Function("SUM", "Sum of elements of an array",
                    new Argument("array", "to compute sum of")),
            new Function("AVERAGE", "Average of elements of an array",
                    new Argument("array", "to compute average of")),
            new Function("MAX", "Max of elements of an array",
                    new Argument("array", "to compute max of")),
            new Function("MIN", "Min of elements of an array",
                    new Argument("array", "to compute min of")),
            new Function("MODE", "Most frequent element of an array",
                    new Argument("array", "to find the most frequent element of")),
            new Function("CORREL", "Returns a correlation coefficient for two arrays",
                    new Argument("table", "to correlate from"),
                    new Argument("array1", "is an array containing numbers"),
                    new Argument("array2", "is an array containing numbers")),
            new Function("FIRST", "First row/element of a table/array",
                    new Argument("table_or_array", "to find the first row/element of"),
                    new Argument("limit", "the result is nested if specified", false, true)),
            new Function("LAST", "Last row/element of a table/array",
                    new Argument("table_or_array", "to find the last row/element of"),
                    new Argument("limit", "the result is nested if specified", false, true)),
            new Function("SINGLE", "Single row/element of a table/array",
                    new Argument("table_or_array", "to find the single row/element of")),
            new Function("PERIODSERIES", "Aggregate a period series",
                    new Argument("table", "to aggregate from"),
                    new Argument("date", "the dates of a period series"),
                    new Argument("value", "the values of a period series"),
                    new Argument("period", "the period of period series")),
            new Function("ROW", "Row number from 0 up to table size exclusively"),
            new Function("DATE", "Return the number that represents the date",
                    new Argument("year", "the year of the date"),
                    new Argument("month", "the month of the date"),
                    new Argument("day", "the day of of the date")),
            new Function("YEAR", "Return the year of a date",
                    new Argument("date", "the date to return from")),
            new Function("MONTH", "Return the month of a date",
                    new Argument("date", "the date to return from")),
            new Function("DAY", "Return the day of a date",
                    new Argument("date", "the date to return from")),
            new Function("HOUR", "Return the hour of a date",
                    new Argument("date", "the date to return from")),
            new Function("MINUTE", "Return the minute of a date",
                    new Argument("date", "the date to return from")),
            new Function("SECOND", "Return the second of a date",
                    new Argument("date", "the date to return from")),
            new Function("CONCAT", "Concatenate numbers or strings",
                    new Argument("values", "the values to concatenate", true)),
            new Function("CONCATENATE", "Concatenate numbers or strings",
                    new Argument("values", "the values to concatenate", true)),
            new Function("TEXT", "Convert a value to text",
                    new Argument("value", "the value to convert"),
                    new Argument("format", "the date format only for dates", false, true)),
            new Function("VALUE", "Convert text to a number",
                    new Argument("text", "the text to convert")),
            new Function("IF", "Check a condition, return one value if true or another if false",
                    new Argument("condition", "the condition to check"),
                    new Argument("value_if_true", "the result if condition is true"),
                    new Argument("value_if_false", "the result if condition is false")),
            new Function("IFNA", "Return a value if not NA or another if NA",
                    new Argument("value", "the result if not NA"),
                    new Argument("value_if_na", "the result if the value is NA")),
            new Function("ISNA", "Return 1 if a value is NA or 0 otherwise",
                    new Argument("value", "the value to check")),
            new Function("ABS", "Return the absolute number",
                    new Argument("number", "is real number for which to return the absolute number")),
            new Function("LEFT", "Return the prefix of text",
                    new Argument("text", "is the text to take the prefix"),
                    new Argument("size", "the number of chars to take from the start")),
            new Function("RIGHT", "Return the suffix of text",
                    new Argument("text", "is the text to take the suffix"),
                    new Argument("size", "the number of chars to take from the end")),
            new Function("MID", "Return the substring of text",
                    new Argument("text", "is the text to take the substring"),
                    new Argument("start", "the start of the substring, the first char is 1"),
                    new Argument("size", "the number of chars to take from the start")),
            new Function("SUBSTITUTE", "Replace substrings with new string",
                    new Argument("text", "is the text to replace"),
                    new Argument("old", "is the substrings to replace"),
                    new Argument("new", "is the substring to replace with")),
            new Function("EXTRAPOLATE", "Extrapolate a period series",
                    new Argument("period_series", "to extrapolate")),
            new Function("PERCENTCHANGE", "Take percent change of a period series",
                    new Argument("period_series", "to take percent change of"))
    );

    public Collection<Function> functions() {
        return FUNCTIONS;
    }
}
