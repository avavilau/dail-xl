package com.epam.deltix.quantgrid.engine.compiler.function;

import lombok.experimental.UtilityClass;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import static com.epam.deltix.quantgrid.engine.compiler.function.FunctionType.*;
@UtilityClass
public class Functions {

    private final List<Function> FUNCTIONS = List.of(
            new Function("RANGE", "Generate an array of numbers from 1 to up to count inclusively",
                    List.of(CREATE_TABLE, TABLE),
                    new Argument("count", "is how many elements to generate from 0 to up this value exclusively")),
            new Function("LIST", "Create an array of numbers or strings",
                    List.of(ARRAY),
                    new Argument("element", "one element of an array", true, true)),
            new Function("INPUT", "Import a table from a file",
                    List.of(CREATE_TABLE, TABLE),
                    new Argument("path", "is the location of the file to import from")),
            new Function("FILTER", "Filter a table or an array",
                    List.of(CREATE_TABLE, TABLE, LOOKUP),
                    new Argument("table_or_array", "the table or  the array to filter"),
                    new Argument("condition", "the condition to filter by")),
            new Function("UNIQUEBY", "Leave only unique rows of a table or unique elements of an array",
                    List.of(CREATE_TABLE, TABLE),
                    new Argument("table_or_array", "the table or the array to filter"),
                    new Argument("keys", "the keys to filter by", true)),
            new Function("UNIQUE", "Leave only unique elements of an array",
                    List.of(ARRAY),
                    new Argument("array", "the array to filter")),
            new Function("SORTBY", "Sort a table or an array",
                    List.of(CREATE_TABLE, TABLE),
                    new Argument("table_or_array", "the table or the array to sort"),
                    new Argument("keys", "the keys to sort by", true)),
            new Function("SORT", "Sort an array",
                    List.of(ARRAY),
                    new Argument("array", "the array to sort")),
            new Function("FIND", "Find a row of a table by its keys or by row number if table doesn't have keys",
                    List.of(LOOKUP),
                    new Argument("table", "the table to find in"),
                    new Argument("keys", "to match with the source table's keys", true)),
            new Function("FIELDS", "Return fields of a table",
                    List.of(TABLE),
                    new Argument("table", "the table which the fields to come from")),
            new Function("TOTAL", "Return a row of a row table by total position",
                    List.of(AGGREGATIONS),
                    new Argument("table", "the table where the total is defined"),
                    new Argument("position", "the total row position in the table. Default: 1", false, true)),
            new Function("UNPIVOT", "Make a pivot longer table from a table",
                    List.of(CREATE_TABLE, TABLE),
                    new Argument("table", "the table to unpivot"),
                    new Argument("new_name_field", "the name of the new field which contains original field names"),
                    new Argument("new_value_field", "the name of the new field which contains original field values"),
                    new Argument("field_condition", "the condition to filter the field names by", false, true)),
            new Function("PIVOT", "Make a pivot wider table from a table",
                    List.of(CREATE_TABLE, TABLE),
                    new Argument("table", "the table to pivot"),
                    new Argument("field", "the expression from which make the pivoted fields"),
                    new Argument("aggregation", "to aggregate the values for the pivoted fields")),
            new Function("COUNT", "Count rows of a table or elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("table_or_array", "to count")),
            new Function("SUM", "Sum of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute sum of")),
            new Function("AVERAGE", "Average of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute average of")),
            new Function("MAXBY", "Return the row with the maximum value of a column",
                    List.of(AGGREGATIONS),
                    new Argument("table", "to find the row with the maximum value"),
                    new Argument("key", "is the key to find the row by")),
            new Function("MAX", "Max of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute max of")),
            new Function("MINBY", "Return the row with the minimum value of a column",
                    List.of(AGGREGATIONS),
                    new Argument("table", "to find the row with the minimum value"),
                    new Argument("key", "is the key to find the row by")),
            new Function("MIN", "Min of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute min of")),
            new Function("STDEVS", "Sample standard deviation of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute sample standard deviation of")),
            new Function("STDEVP", "Population standard deviation of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute population standard deviation of")),
            new Function("GEOMEAN", "Geometric mean of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute geometric mean of")),
            new Function("MEDIAN", "Median estimation of elements of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to compute median of")),
            new Function("MODE", "Most frequent element of an array",
                    List.of(AGGREGATIONS),
                    new Argument("array", "to find the most frequent element of")),
            new Function("CORREL", "Returns a correlation coefficient for two arrays",
                    List.of(AGGREGATIONS),
                    new Argument("array1", "is an array containing numbers"),
                    new Argument("array2", "is an array containing numbers")),
            new Function("FIRST", "First row/element of a table/array",
                    List.of(AGGREGATIONS),
                    new Argument("table_or_array", "to find the first row/element of"),
                    new Argument("limit", "Number of elements to return (optional). If specified, function returns an array up to the first 'limit' elements. If not specified, returns first element only: number, text or row.", false, true)),
            new Function("LAST", "Last row/element of a table/array",
                    List.of(AGGREGATIONS),
                    new Argument("table_or_array", "to find the last row/element of"),
                    new Argument("limit", "Number of elements to return (optional). If specified, function returns an array up to the last 'limit' elements. If not specified, returns last element only: number, text or row.", false, true)),
            new Function("SINGLE", "Single row/element of a table/array",
                    List.of(AGGREGATIONS),
                    new Argument("table_or_array", "to find the single row/element of")),
            new Function("PERIODSERIES", "Aggregate a period series",
                    List.of(PERIOD_SERIES),
                    new Argument("date", "the dates of a period series"),
                    new Argument("value", "the values of a period series"),
                    new Argument("period", "the period of period series")),
            new Function("ROW", "Row number from 0 up to table size exclusively", List.of(TABLE)),
            new Function("DATE", "Return the number that represents the date",
                    List.of(DATE),
                    new Argument("year", "the year of the date"),
                    new Argument("month", "the month of the date"),
                    new Argument("day", "the day of of the date")),
            new Function("YEAR", "Return the year of a date",
                    List.of(DATE),
                    new Argument("date", "the date to return from")),
            new Function("MONTH", "Return the month of a date",
                    List.of(DATE),
                    new Argument("date", "the date to return from")),
            new Function("DAY", "Return the day of a date",
                    List.of(DATE),
                    new Argument("date", "the date to return from")),
            new Function("HOUR", "Return the hour of a date",
                    List.of(DATE),
                    new Argument("date", "the date to return from")),
            new Function("MINUTE", "Return the minute of a date",
                    List.of(DATE),
                    new Argument("date", "the date to return from")),
            new Function("SECOND", "Return the second of a date",
                    List.of(DATE),
                    new Argument("date", "the date to return from")),
            new Function("CONCAT", "Concatenate numbers or strings",
                    List.of(TEXT),
                    new Argument("values", "the values to concatenate", true)),
            new Function("CONCATENATE", "Concatenate numbers or strings",
                    List.of(TEXT),
                    new Argument("values", "the values to concatenate", true)),
            new Function("TEXT", "Convert a value to text",
                    List.of(TEXT),
                    new Argument("value", "the value to convert"),
                    new Argument("format", "the date format only for dates", false, true)),
            new Function("VALUE", "Convert text to a number",
                    List.of(TEXT),
                    new Argument("text", "the text to convert")),
            new Function("IF", "Check a condition, return one value if true or another if false",
                    List.of(LOGICAL),
                    new Argument("condition", "the condition to check"),
                    new Argument("value_if_true", "the result if condition is true"),
                    new Argument("value_if_false", "the result if condition is false")),
            new Function("IFNA", "Return a value if not NA or another if NA",
                    List.of(LOGICAL),
                    new Argument("value", "the result if not NA"),
                    new Argument("value_if_na", "the result if the value is NA")),
            new Function("ISNA", "Return 1 if a value is NA or 0 otherwise",
                    List.of(LOGICAL),
                    new Argument("value", "the value to check")),
            new Function("ABS", "Return the absolute number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the absolute number")),
            new Function("SQRT", "Return the square root of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the square root")),
            new Function("ROUND", "Return the rounded number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the rounded number")),
            new Function("FLOOR", "Return the largest integer less than or equal to a given real number.",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the floor value.")),
            new Function("CEIL", "Return the smallest integer greater than or equal to a given real number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the ceiling value")),
            new Function("EXP", "Return the exponent of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the exponent")),
            new Function("LN", "Return the natural logarithm of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the natural logarithm")),
            new Function("LOG10", "Return the base 10 logarithm of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the base 10 logarithm")),
            new Function("SIN", "Return the sine of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the sine")),
            new Function("COS", "Return the cosine of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the cosine")),
            new Function("TAN", "Return the tangent of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the tangent")),
            new Function("ASIN", "Return the arcsine of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the arcsine")),
            new Function("ACOS", "Return the arccosine of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the arccosine")),
            new Function("ATAN", "Return the arctangent of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the arctangent")),
            new Function("LOG", "Return the logarithm of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the logarithm"),
                    new Argument("base", "is the base of the logarithm")),
            new Function("POW", "Return the power of a number",
                    List.of(MATH),
                    new Argument("number", "is real number for which to return the power"),
                    new Argument("exponent", "is the exponent of the power")),
            new Function("LEFT", "Return the prefix of text",
                    List.of(TEXT),
                    new Argument("text", "is the text to take the prefix"),
                    new Argument("size", "the number of chars to take from the start")),
            new Function("RIGHT", "Return the suffix of text",
                    List.of(TEXT),
                    new Argument("text", "is the text to take the suffix"),
                    new Argument("size", "the number of chars to take from the end")),
            new Function("MID", "Return the substring of text",
                    List.of(TEXT),
                    new Argument("text", "is the text to take the substring"),
                    new Argument("start", "the start of the substring, the first char is 1"),
                    new Argument("size", "the number of chars to take from the start")),
            new Function("SUBSTITUTE", "Replace substrings with new string",
                    List.of(TEXT),
                    new Argument("text", "is the text to replace"),
                    new Argument("old", "is the substrings to replace"),
                    new Argument("new", "is the substring to replace with")),
            new Function("EXTRAPOLATE", "Extrapolate a period series",
                    List.of(PERIOD_SERIES),
                    new Argument("period_series", "to extrapolate")),
            new Function("PERCENTCHANGE", "Take percent change of a period series",
                    List.of(PERIOD_SERIES),
                    new Argument("period_series", "to take percent change of")),
            new Function("INDEX", "Return row at specified index",
                    List.of(LOOKUP),
                    new Argument("table", "the table to get the row from"),
                    new Argument("index", "Row index")),
            new Function("LOWER", "Return the lower case of text",
                    List.of(TEXT),
                    new Argument("text", "is the text to convert to lower case")),
            new Function("UPPER", "Return the upper case of text",
                    List.of(TEXT),
                    new Argument("text", "is the text to convert to upper case")),
            new Function("LEN", "Return the length of text",
                    List.of(TEXT),
                    new Argument("text", "is the text to return the length of")),
            new Function("TRIM", "Return the text with leading and trailing spaces removed",
                    List.of(TEXT),
                    new Argument("text", "is the text to remove leading and trailing spaces from")),
            new Function("PI", "Return the value of PI", List.of(MATH)),
            new Function("CONTAINS", "Return true if a text contains another text",
                    List.of(TEXT),
                    new Argument("text", "is the text to check"),
                    new Argument("value", "is the substring")),
            new Function("SPLIT", "Split a text by a delimiter",
                    List.of(TEXT),
                    new Argument("text", "is the text to split"),
                    new Argument("delimiter", "is the delimiter to split by")),
            new Function("STRIP", "Return the text with leading and trailing spaces removed",
                    List.of(TEXT),
                    new Argument("text", "is the text to remove leading and trailing spaces from"),
                    new Argument("text_to_remove", "is the text to remove from the start and the end")),
            new Function("STRIP_START", "Return the text with leading spaces removed",
                    List.of(TEXT),
                    new Argument("text", "is the text to remove leading spaces from"),
                    new Argument("text_to_remove", "is the text to remove from the start")),
            new Function("STRIP_END", "Return the text with trailing spaces removed",
                    List.of(TEXT),
                    new Argument("text", "is the text to remove trailing spaces from"),
                    new Argument("text_to_remove", "is the text to remove from the end")),
            new Function("UNICHAR", "Return the unicode character specified by a number", List.of(TEXT),
                    new Argument("code", "is the code of the character from 1 to 65535")),
            new Function("DATERANGE", "Generates an array of dates from date1 to date2 (inclusive bounds)",
                    List.of(DATE, ARRAY),
                    new Argument("date1", "The left border of the generated dates"),
                    new Argument("date2", "The right border of the generated dates"),
                    new Argument("increment", "The increment size between the generated dates. Default: 1", false, true),
                    new Argument("date_type", "The number that defines the type of the generated dates. Possible values:\n- 1 (SECOND)\n- 2 (MINUTE)\n- 3 (HOUR)\n- 4 (DAY, default)\n- 5 (WORKDAY)\n- 6 (WEEK)\n- 7 (MONTH)\n- 8 (QUARTER)\n- 9 (YEAR)\n", false, true)),
            new Function("WORKDAY", "Calculates the end date after a specified number of working days",
                    List.of(DATE),
                    new Argument("start_date", "The date from which to begin counting"),
                    new Argument("days", "The number of working days to advance from start_date. If negative, counts backwards")),
            new Function("RowReference", "Find a row by a text or a number", List.of(TABLE),
                    new Argument("value", "text or number", true)),
            new Function("EVALUATE_N", "Evaluates optimal number of retriever results for the specified field",
                    List.of(EVALUATION),
                    new Argument("target_field", "The field to get the evaluation result", false)),
            new Function("EVALUATE_MODEL", "Evaluates optimal embedding model for the specified field",
                    List.of(EVALUATION),
                    new Argument("target_field", "The field to get the evaluation result", false)),
            new Function("RETRIEVE", "Retrieves items based on the question",
                    List.of(EVALUATION),
                    new Argument("array", "The data to retrieve", false),
                    new Argument("question", "The question to retrieve", false),
                    new Argument("n", "The number of results", false, false),
                    new Argument("model", "The embedding model name", false, false)),
            new Function("RETRIEVE_SCORES", "Retrieves items based on the question and returns score values",
                    List.of(EVALUATION),
                    new Argument("array", "The data to retrieve", false),
                    new Argument("question", "The question to retrieve", false),
                    new Argument("n", "The number of results", false, false),
                    new Argument("model", "The embedding model name", false, false)),
            new Function("RETRIEVE_DESCRIPTIONS", "Retrieves items based on the question and returns description values",
                    List.of(EVALUATION),
                    new Argument("array", "The data to retrieve", false),
                    new Argument("question", "The question to retrieve", false),
                    new Argument("n", "The number of results", false, false),
                    new Argument("model", "The embedding model name", false, false)),
            new Function("RECALL", "Calculates the recall metric for the retriever based on the ground truth",
                    List.of(EVALUATION),
                    new Argument("retriever", "The retriever result to calculate the metric", false),
                    new Argument("ground_truth", "The ground truth text with \";\" as the separator for items", false)),
            new Function("BETWEEN", "Check if a value is between two other values, inclusive",
                    List.of(LOGICAL),
                    new Argument("value", "The value to check"),
                    new Argument("start", "The start of the range, inclusive"),
                    new Argument("end", "The end of the range, inclusive")),
            new Function("UNION", "Combine two arrays into one, removing duplicate elements",
                    List.of(ARRAY),
                    new Argument("array1", "The first array to combine"),
                    new Argument("array2", "The second array to combine")),
            new Function("INTERSECT", "Return the common elements between two arrays",
                    List.of(ARRAY),
                    new Argument("array1", "The first array to intersect"),
                    new Argument("array2", "The second array to intersect")),
            new Function("SUBTRACT", "Return the elements of the first array that are not in the second array",
                    List.of(ARRAY),
                    new Argument("array1", "The array to subtract from"),
                    new Argument("array2", "The array to subtract")),
            new Function("IN", "Check if an element is present in an array",
                    List.of(ARRAY, LOGICAL),
                    new Argument("element", "The element to check for presence"),
                    new Argument("array", "The array to check within"))
    );

    private static final Map<String, Function> FUNCTION_MAP = FUNCTIONS.stream()
            .collect(Collectors.toUnmodifiableMap(Function::name, java.util.function.Function.identity()));

    public Collection<Function> functions() {
        return FUNCTIONS;
    }

    public Function getFunction(String name) {
        return FUNCTION_MAP.get(name);
    }
}
