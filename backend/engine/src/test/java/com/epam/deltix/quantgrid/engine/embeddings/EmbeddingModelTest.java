package com.epam.deltix.quantgrid.engine.embeddings;

import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;

class EmbeddingModelTest {
    private static final String TEST_INPUT = "test input";
    private static final double[] TEST_INPUT_EMBEDDING = new double[] {
            -0.056877657771110535, -0.03404735401272774, 0.031785666942596436, -0.03827700391411781,
            -0.025163089856505394, 0.01522503886371851, 0.05409736931324005, 0.022185619920492172, 0.00727356132119894,
            0.019081931561231613, -0.02993490919470787, -0.0553334541618824, 0.039686962962150574, 0.032857172191143036,
            0.022806666791439056, -0.033471524715423584, -0.03307526186108589, -0.020192040130496025,
            -0.06269960850477219, -0.007448637392371893, 0.02795294299721718, 0.03684637323021889,
            -0.019987255334854126, -0.04459470883011818, -0.012869946658611298, -0.007592122536152601,
            0.03952162712812424, -0.029467999935150146, -0.07632365822792053, -0.12340942770242691, 0.00789191760122776,
            -0.01913355104625225, 0.057911865413188934, -0.020272301509976387, -0.024073343724012375,
            0.011506637558341026, -0.04213938117027283, -0.04603944718837738, -0.028324823826551437,
            -0.03498060628771782, 0.0413774810731411, -0.04036283865571022, -0.03592745214700699, -0.030516881495714188,
            -0.007436535321176052, -0.02185722440481186, 0.016914015635848045, -0.03663799539208412,
            0.07181672006845474, -0.014731479808688164, -0.043495845049619675, -0.026972750201821327,
            0.04678500071167946, -0.03138629347085953, 0.041825681924819946, 0.013188035227358341, 0.063180111348629,
            0.06478528678417206, 0.04926547035574913, -0.00637357821688056, -0.013112612068653107, 0.06082922965288162,
            -0.1536644846200943, 0.04555225744843483, 0.03832106664776802, 0.026245882734656334, -0.02978474833071232,
            -0.008834759704768658, 0.010148278437554836, 0.016956858336925507, 0.007012736052274704,
            1.1484825517982244E-4, -0.02736433409154415, 0.1362220197916031, 0.015249522402882576, 0.013091757893562317,
            -3.324968565721065E-4, -0.03584940358996391, 0.06269118934869766, 0.013803820125758648,
            -0.03167524188756943, -0.026945117861032486, 0.010590055957436562, 0.05100679397583008, 0.01364318747073412,
            -0.002278253436088562, -0.008211320266127586, 0.06291064620018005, 0.03690163046121597,
            -0.03608359023928642, 0.007980729453265667, 0.002124844817444682, -0.04291500151157379, 0.01481718011200428,
            0.006688911933451891, -0.001952274818904698, 0.038125693798065186, -0.04906410723924637,
            -0.08159223198890686, 0.28618162870407104, -0.06879064440727234, 0.034033630043268204, -0.02570159174501896,
            -0.046816762536764145, -0.0022235228680074215, -0.008586594834923744, -0.013131637126207352,
            -0.0437781997025013, -0.07576454430818558, -0.024791687726974487, 0.012831092812120914,
            -0.035105910152196884, 0.00913553312420845, 0.021742969751358032, -0.08325175195932388, 0.09199915826320648,
            0.02888444997370243, -0.0015900827711448073, -0.021471470594406128, -0.05346555635333061,
            -0.027748089283704758, 0.012104054912924767, -0.01695675030350685, -0.04930377006530762,
            0.06237359717488289, -0.06691313534975052, 0.06022252142429352, 0.13180717825889587, -0.06073937565088272,
            0.036316800862550735, 0.054495919495821, -0.024304479360580444, -0.08611731976270676, 0.013852841220796108,
            -0.026248255744576454, 0.015234604477882385, 0.008552729152143002, 0.010243454948067665,
            -0.027945393696427345, 0.060455530881881714, -0.038541220128536224, -0.05924907326698303,
            0.002774782245978713, -0.055581849068403244, -0.04316909611225128, 0.05485042929649353,
            -0.021529795601963997, 0.0030540546867996454, -0.022779524326324463, -0.0858101174235344,
            0.02047109790146351, 0.08343321084976196, -0.014922881498932838, -0.02041010931134224,
            -0.009675734676420689, 0.041915569454431534, 0.04444964975118637, -0.016906503587961197,
            0.016404220834374428, 0.012293609790503979, -0.08265557140111923, -0.015467890538275242,
            -0.08602803945541382, 0.01051093079149723, 0.02068711258471012, -0.008534613996744156,
            -0.054704874753952026, -0.041594453155994415, 0.036719005554914474, -0.04201284050941467,
            0.0039130207151174545, -0.008710293099284172, -0.08175431936979294, -0.04924456402659416,
            0.005272639915347099, -0.029333675280213356, 0.010788901709020138, 0.06197557598352432,
            0.026046952232718468, 0.04922628402709961, 0.009093970991671085, 0.008551906794309616, -0.02754148095846176,
            0.04350999742746353, 0.06101585924625397, 0.007856210693717003, -0.026386624202132225, -0.0564543753862381,
            -0.017230607569217682, 0.07165420055389404, 0.02583012729883194, -0.028413284569978714,
            -0.040649667382240295, 0.04979875683784485, -0.03714923933148384, -0.05742260441184044,
            0.009718101471662521, -0.0036315165925771, -0.01527427602559328, -0.054012056440114975, 0.1053340807557106,
            0.017559325322508812, 0.0010078034829348326, -2.483040443621576E-4, -0.005082123447209597,
            0.029016435146331787, 0.009098665788769722, -0.031014686450362206, 0.07877536118030548,
            0.020615311339497566, -0.03192859888076782, -0.022893225774168968, 0.11100111901760101,
            0.009193199686706066, -0.016875870525836945, -0.042342618107795715, -4.94577398058027E-4,
            0.01836884208023548, 0.034016527235507965, 0.061565835028886795, -0.013954438269138336,
            -0.01901927776634693, -0.008234080858528614, -0.30582085251808167, 0.008268793113529682, 0.0378948412835598,
            0.0037162811495363712, 0.03987355902791023, -0.00861540250480175, 0.015591171570122242,
            0.027085263282060623, 0.02423100173473358, 0.005710611119866371, 0.04698266088962555, 0.024510828778147697,
            0.02927551418542862, 0.014509916305541992, 0.009763660840690136, 0.011794028803706169, 0.007373080588877201,
            -0.02880856581032276, -0.010913192294538021, 0.04033753275871277, -0.046137332916259766,
            0.002836854662746191, 0.04056805372238159, -0.07961465418338776, 0.068763867020607, -0.028460098430514336,
            0.17638958990573883, 0.01501663587987423, 0.07069410383701324, -0.018716521561145782, 0.02322297915816307,
            0.017879491671919823, -0.009905700571835041, -0.08789028972387314, 0.08402793854475021,
            0.022534003481268883, -0.08138915151357651, 0.08737600594758987, -0.042166855186223984,
            -0.032522544264793396, -0.006994892377406359, 0.009145956486463547, -0.01017500925809145,
            -0.05861915647983551, 0.04426012933254242, -0.020192502066493034, -0.04407735913991928,
            -0.04366479441523552, -0.0993523970246315, 0.025105906650424004, -0.0029857477638870478,
            -0.032483987510204315, -0.003265323583036661, 0.040207184851169586, 0.03344624862074852,
            -0.049908287823200226, -0.03207956999540329, -0.0019656498916447163, -0.004504005424678326,
            -0.026714419946074486, 0.052829843014478683, 0.028069498017430305, -0.003089288715273142,
            -0.031571436673402786, 0.008783846162259579, -0.006519956048578024, -0.012713104486465454,
            -0.017786357551813126, 0.06792113929986954, 0.0032916623167693615, -0.01197138987481594,
            0.029486650601029396, 0.049146588891744614, 0.07789898663759232, -0.002468620426952839,
            0.040472421795129776, 0.0050234002992510796, -0.0031011211685836315, -5.293192807585001E-4,
            -0.018204472959041595, -0.0050437538884580135, 0.025987932458519936, 0.006123685277998447,
            0.006928548216819763, 0.041710104793310165, 0.03470355644822121, 0.015129412524402142,
            -0.015792718157172203, 0.13281062245368958, -0.05331604555249214, -0.015507408417761326,
            -0.0326196551322937, -0.02015303447842598, -0.04215107858181, -0.01053942833095789, 0.0030679949559271336,
            -0.2172141671180725, 0.01043021585792303, 0.020172322168946266, 0.06398463249206543, -0.051532190293073654,
            0.04303814098238945, -0.011174269951879978, -0.01914467103779316, -0.09477607905864716, 0.03539673238992691,
            -0.004032954107969999, -0.01341840997338295, -0.0015800584806129336, -0.029347367584705353,
            -0.017800668254494667, 0.0622875839471817, 0.04185362160205841, -0.08721251785755157, 0.06724559515714645,
            -0.0977637767791748, 0.012734685093164444, 0.056274693459272385, 0.2083325833082199, -0.056365542113780975,
            0.010144587606191635, 0.03306789696216583, 0.0352245531976223, 0.016512969508767128, 0.13572700321674347,
            -0.016347598284482956, 0.04593634232878685, -0.025548435747623444, 0.1018877699971199,
            -0.017990529537200928, 0.013559604994952679, 0.06326190382242203, -0.05834944173693657,
            -1.5317052020691335E-4, 2.4303665850311518E-4, -0.03811655566096306, -0.024704506620764732,
            0.0027233499567955732, -0.06556648761034012, -0.007688307203352451, 0.02538430131971836,
            0.018200695514678955, 0.0016966087277978659, -0.06109974905848503, -0.06410791724920273,
            0.006458777468651533, 0.013439452275633812, -0.006103520281612873, 0.04400109872221947,
            0.0029079890809953213, 0.058034561574459076, 0.034428421407938004, 0.0010868966346606612,
            -0.018138624727725983, -0.01538238488137722, -0.011081105098128319, -0.01351090893149376,
            -0.023051384836435318, 0.13763141632080078, 0.03967117890715599, -0.02050062268972397
    };

    @Test
    void testBatching() throws IOException {
        EmbeddingModel model =
                EmbeddingModel.load(Path.of("../../embedding_models"), "bge-small-en-v1.5", "ACCURACY");

        String[] input = Stream.generate(() -> TEST_INPUT)
                .limit(2 * EmbeddingModel.BATCH_SIZE + 1)
                .toArray(String[]::new);
        double[] expected = Stream.generate(() -> TEST_INPUT_EMBEDDING)
                .limit(input.length)
                .flatMapToDouble(Arrays::stream)
                .toArray();

        double[] actual = model.predict(input, () -> {});

        assertThat(actual).usingComparatorWithPrecision(1e-6)
                .containsExactly(expected);
    }
}