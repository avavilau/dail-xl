syntax = "proto3";
option java_package = "org.epam.deltix.proto";

message Request {
    // correlation id, optional only for ping requests
    optional string id = 1;
    oneof request {
        DimensionalSchemaRequest dimensional_schema_request = 2;
        FunctionRequest function_request = 3;
        CalculateWorksheetsRequest calculate_worksheets_request = 4;
        CompileWorksheetsRequest compile_worksheets_request = 5;
        DownloadRequest download_request = 6;
        SimilaritySearchRequest similarity_search_request = 7;
    }
}

message Viewport {
    oneof key {
        FieldKey fieldKey = 1;
        TotalKey totalKey = 2;
    }
    sint64 start_row = 3;
    sint64 end_row = 4;
    bool is_content = 5;
}

message DimensionalSchemaRequest {
    // Project name should only be specified for the WebSocket interface.
    optional string project_name = 1;
    string formula = 2;
    // The sheets are supported by the HTTP endpoint only.
    map<string, string> worksheets = 3;
}

message FunctionRequest {
    // Project name should only be specified for the WebSocket interface.
    optional string project_name = 1;
    // The sheets are supported by the HTTP endpoint only.
    map<string, string> worksheets = 2;
}

message Response {
    // correlation id, if present - response message, otherwise - event
    optional string id = 1;
    // response status, if present - response message, otherwise - event
    optional Status status = 2;
    // optional error message for failed requests
    optional string error_message = 3;
    oneof response {
        ColumnData column_data = 4;
        DimensionalSchemaResponse dimensional_schema_response = 5;
        FunctionResponse function_response = 6;
        CompileResult compile_result = 7;
        SimilaritySearchResponse similarity_search_response = 8;
    }
}

enum Status {
    SUCCEED = 0;
    FAILED = 1;
    VERSION_CONFLICT = 2;
    NOT_FOUND = 3;
    INVALID_PROTOCOL = 4;
}


// For csv inputs:
// If the header (first line) is longer than any of the rows, the rows will be
// extended with empty values to match the header size.
// If the header is shorter than any of the rows, the header will be extended with
// autogenerated names ("Column<position>").
// If all values in an autogenerated column are empty or null, the column type will be set to `null`.
// Returns an error message in the following cases:
// * The document is empty
// * There are columns with identical names.
// * User does not have permissions to the file.
// * File read error.
// * Max number of columns (currently 512) is exceeded.
// * Max value length (currently 1,048,576) is exceeded.
// Note: The CSV document should not have mixed line endings; the line ending symbol is determined during header parsing.
message DimensionalSchemaResponse {
    optional string project_name = 1;
    string formula = 2;
    optional string error_message = 3;
    // list of fields for tables/inputs, or empty list for columns
    repeated string schema = 4;
    // list of key fields
    repeated string keys = 5;
    FieldInfo field_info = 6;
}

message FunctionResponse {
    repeated Function functions = 1;
}

message TableKey {
    string table = 1;
}

message FieldKey {
    string table = 1;
    string field = 2;
}

message ApplyKey {
    string table = 1;
    string function = 2; // sort/filter
}

message TotalKey {
    string table = 1;
    string field = 2;
    uint32 number = 3; // starts from 1
}

message OverrideKey {
    string table = 1;
    string field = 2;
    uint32 row = 3; // starts from 1
}

message Source {
    uint32 start_line = 1;   // starts from 1
    uint32 start_column = 2; // starts from 1
}

message ParsingError {
    oneof key {
        TableKey tableKey = 1;
        FieldKey fieldKey = 2;
        ApplyKey applyKey = 3;
        TotalKey totalKey = 4;
        OverrideKey overrideKey = 5;
    }

    string message = 6;
    optional Source source = 7;
}

message CompilationError {
    oneof key {
        TableKey tableKey = 1;
        FieldKey fieldKey = 2;
        ApplyKey applyKey = 3;
        TotalKey totalKey = 4;
        OverrideKey overrideKey = 5;
    }

    string message = 6;
    optional Source source = 7;
}

message ColumnData {
    oneof key {
        FieldKey fieldKey = 1;
        TotalKey totalKey = 2;
    }
    optional string error_message = 3;
    repeated string data = 4;
    sint64 start_row = 5;
    sint64 end_row = 6;
    sint64 total_rows = 7;
    ColumnDataType type = 8;
    // true if cell represented as collection of data (N strings, N rows)
    bool isNested = 9;
    // name of the table in case ColumnDataType.TABLE
    optional string reference_table_name = 10;
    repeated PeriodSeries period_series = 11;
}

message PeriodSeries {
   map<string, string> points = 1;
}

enum ColumnDataType {
    UNKNOWN = 0;
    STRING = 1;
    DOUBLE = 2;
    INTEGER = 3;
    BOOLEAN = 4;
    DATE = 5;
    PERIOD_SERIES = 6;
    TABLE = 7;
    INPUT = 8;
    PERIOD_SERIES_POINT = 9;
}

enum FunctionType {
    // Functions that usually used to create new tables
    CREATE_TABLE_FUNCTIONS = 0;
    // Functions that aggregate array of values / row references into single value / row reference
    AGGREGATIONS_FUNCTIONS = 1;
    // Simple math and arithmetic: PI, Log, Sqrt etc
    MATH_FUNCTIONS = 2;
    // Logical operations, IF, IFNA etc.
    LOGICAL_FUNCTIONS = 3;
    // Miscellaneous functions that accept or create table (array of row reference)
    TABLE_FUNCTIONS = 4;
    // Miscellaneous functions that accept or create array
    ARRAY_FUNCTIONS = 5;
    // Functions that help look up value in array or table
    LOOKUP_FUNCTIONS = 6;
    // Functions that creates or operates with dates/timestamps
    DATE_FUNCTIONS = 7;
    // Functions that creates or operates with strings/texts
    TEXT_FUNCTIONS = 8;
    // Functions that creates or operates with period series
    PERIOD_SERIES_FUNCTIONS = 9;
    // Custom functions declared in python
    PYTHON_FUNCTIONS = 10;
    // Functions that useful for evaluation
    EVALUATION_FUNCTIONS = 11;
}

message Function {
    string name = 1;
    string description = 2;
    repeated Argument arguments = 3;
    repeated FunctionType function_type = 4;
}

message Argument {
    string name = 1;
    string description = 2;
    bool repeatable = 3;
    bool optional = 4;
}

// A request to calculate the provided worksheets.
// If a project name is provided, the calculation may reuse the project cache, if available.
// An empty worksheets map will result in an empty calculation.
// The response to this request will be followed by column data messages for the requested viewports.
message CalculateWorksheetsRequest {
    optional string project_name = 1;
    map<string, string> worksheets = 2;
    repeated Viewport viewports = 3;
    optional bool includeCompilation = 4;
}

message CompileWorksheetsRequest {
    map<string, string> worksheets = 1;
}

message FieldInfo {
    oneof key {
        FieldKey fieldKey = 1;
        TotalKey totalKey = 2;
        OverrideKey overrideKey = 3;
    }
    ColumnDataType type = 4;
    // true if cell represented as collection of data (N strings, N rows)
    bool is_nested = 5;
    // name of the table in case ColumnDataType.TABLE
    optional string reference_table_name = 6;
}

message ParsedSheet {
    string name = 1;
    repeated ParsingError parsing_errors = 2;
}

message CompileResult {
    repeated ParsedSheet sheets = 1;
    repeated CompilationError compilation_errors = 2;
    repeated FieldInfo field_info = 3;
}

message DownloadRequest {
    string project = 1;
    map<string, string> sheets = 2;
    string table = 3;
    repeated string columns = 4;
}

message SimilaritySearchRequest {
    string project = 1;
    map<string, string> sheets = 2;
    repeated SimilaritySearchColumn columns = 3;
    string query = 4;
    sint32 n = 5;
    bool search_in_all = 6;
    bool use_evaluation = 7;
}

message SimilaritySearchResponse {
    repeated SimilaritySearchScore scores = 1;
}

message SimilaritySearchColumn {
    string table = 1;
    string column = 2;
    sint32 n = 3;
}

message SimilaritySearchScore {
    string table = 1;
    string column = 2;
    string value = 3;
    string description = 4;
    double score = 5;
}