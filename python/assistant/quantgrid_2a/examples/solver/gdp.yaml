user_name: gdp_example_user
ai_name: gdp_example_ai
messages:
  - HumanMessage:
      content: |-
        # User Request
        
        Can you give me GDP for the neighbors of France?
        
        # Table Schemas
        
        table Indicators:
          [unnested] source: ?
          'COUNTRY.ID': number
          'COUNTRY.Name' string
          'COUNTRY.Description': string
          'INDICATOR.ID': number
          'INDICATOR.Name': string
          'INDICATOR.Formula': string
          'YEAR': number
          'OBS_VALUE': number
  - AIMessage:
      content: >-
        ### Workspace Analysis
        
        Table Indicators contain data about various country indicators.
        
        1. Field 'COUNTRY.Name' contains country name.
        
        2. Field 'INDICATOR.Name' presumably contains names of indicators, such as GDP.
        
        3. Field 'OBS_VALUE' is abbreviation of "Observation Value".
        
        ### Data Format Analysis
        
        There is no explicit information about countries neighbors code generator can utilize,
        but France neighbors are generally known, and their names can be hard coded into field using explicit array.

        Mainland France neighbors are Belgium, Luxembourg, Germany, Switzerland, Italy, Monaco, Spain and Andorra.
        
        ### Solution Plan
        
        The solution plan is as follows:
        
        1. Create table with new field, containing all France neighbors: Belgium, Luxembourg, Germany, Switzerland, Italy, Monaco, Spain, Andorra. This formula will return array<string>, so it needs to be unnested to create new row for every neighboring country.
        
        2. For every neighboring country, filter out row_refs from Indicators table that conforms to the following condition:
        'COUNTRY.Name' equals Neighbor value, and their 'INDICATOR.Name' field contains either "GDP" or gross domestic product case insensitive.
        We also should unnest this field to create new row for every satisfying indicator.
        Such way, for every neighboring country and for every GDP related country indicator, table will have separate row.
      tool:
        name: create_field
        args:
          table_name: FranceNeighborsGDP
          create_table: true
          field_name: Neighbor
          field_formula: '{"Belgium", "Luxembourg", "Germany", "Switzerland", "Italy", "Monaco", "Spain", "Andorra"}'
          unnest_formula: true
          parametrize_by: [ ]
          expected_value_type: string
  - ToolMessage:
      content: |-
        Field Neighbor created. Field value type: string.
        Field values snippet: ["Belgium", "Luxembourg", "Germany", "Switzerland", "Italy", "Monaco", "Spain", "Andorra"].
  - AIMessage:
      content: |-
        Now, I need to create unnested field Indicator.
        Such way, for every France neighboring country, there will be as many rows with indicator, as many GDP related indicators for that country is present in Indicators table. 
        
        I need to use "filter" function to filter out entries.
        I need to use "isSubString" to check "GDP" or "gross domestic product" substring.
        I need to use "lower" to check substrings case-insensitive, as required in instructions.
        
        This field is required to hold row_ref to Indicators table, so I'll just leave filter results as is.
      tool:
        name: create_field
        args:
          table_name: FranceNeighborsGDP
          create_table: false
          field_name: Indicator
          field_formula: "Indicators.filter((row: row_ref<Indicators>) => { Neighbor == row.'COUNTRY.Name' and (isSubString(row.'INDICATOR.Name'.lower(), \"gdp\") or isSubString(row.'INDICATOR.Name'.lower(), \"gross domestic product\")) })"
          unnest_formula: true
          parametrize_by: [ Neighbor ]
          expected_value_type: row_ref<Indicators>
  - ToolMessage:
      content: |-
        Field Indicator created. Field value type: row_ref<Indicators>.
  - AIMessage:
      content: |-
        For every france neighbor, for every GDP related indicator, table contains row_ref to Indicator table.
        Now, we need to unpack needed values from row_refs into separate field to provide direct access to requested values.
      tool:
        name: create_field
        args:
          table_name: FranceNeighborsGDP
          create_table: false
          field_name: Name
          field_formula: "Indicator.'INDICATOR.Name'"
          unnest_formula: false
          parametrize_by: [ Indicator ]
          expected_value_type: string
  - ToolMessage:
      content: |-
        Field Name created. Field value type: string.
        Field values snippet: ["GDP", "Gross Domestic Product", "GDP (U.S. Dollars)"].
  - AIMessage:
      content: ""
      tool:
        name: create_field
        args:
          table_name: FranceNeighborsGDP
          create_table: false
          field_name: Value
          field_formula: "Indicator.'OBS_VALUE'"
          unnest_formula: false
          parametrize_by: [ Indicator ]
          expected_value_type: number
  - ToolMessage:
      content: |-
        Field Value created. Field value type: number.
  - AIMessage:
      content: |-
        Table FranceNeighborsGDP contains answer to the user question: references to relevant rows from Indicator table as well as fields with explicit indicator names and values.
  - HumanMessage:
      content: |-
        # User Request

        Create a table with highest indicator value for every country and year.

        # Table Schemas

        table Indicators:
          [unnested] source: ?
          'COUNTRY.ID': number
          'COUNTRY.Name' string
          'COUNTRY.Description': string
          'INDICATOR.ID': number
          'INDICATOR.Name': string
          'INDICATOR.Formula': string
          'YEAR': number
          'OBS_VALUE': number
  - AIMessage:
      content: |-
        ### Workspace Analysis
        
        Table Indicators contain data about various country indicators.
        
        1. Field 'COUNTRY.Name' contains country name.
        
        2. Field 'YEAR' contains numbers of years.
        
        3. Field 'OBS_VALUE' is abbreviation of "Observation Value".
        
        # Solution Plan
        
        I need to generate table, that contains data for all combinations of two fields values.
        Therefore, I need to group table data by year and country.
        So, I need to extract unique values of 'YEAR' and 'COUNTRY.Name' to create all combinations of their values.
      tool:
        name: create_field
        args:
          table_name: CountryYearIndicators
          create_table: true
          field_name: Country
          field_formula: "Indicators.'COUNTRY.Name'.uniqueBy((val: string) => { val })"
          unnest_formula: true
          parametrize_by: [ ]
          expected_value_type: string
  - ToolMessage:
      content: |-
        Field Country created. Field value type: string.
  - AIMessage:
      content: ""
      tool:
        name: create_field
        args:
          table_name: CountryYearIndicators
          create_table: false
          field_name: Year
          field_formula: "Indicators.'YEAR'.uniqueBy((val: number) => { val })"
          unnest_formula: true
          parametrize_by: [ ]
          expected_value_type: number
  - ToolMessage:
      content: |-
        Field Year created. Field value type: number.
  - AIMessage:
      content: |-
        Currently, table CountryYearIndicator contains all unique combinations of year and country.
        Now I need for every country-year combination to find highest indicator value.
        
        I will filter out entries that refer to year "Year" and country "Country" from Indicators tables, sort them in descending order by 'OBS_VALUE' and retrieve reference to the indicator with the highest OBS_VALUE.
      tool:
        name: create_field
        args:
          table_name: CountryYearIndicators
          create_table: false
          field_name: HighestIndicator
          field_formula: "Indicators.FILTER((row: row_ref<Indicators>) => { row.'COUNTRY.Name' == Country and row.YEAR == Year }).sortBy((row: row_ref<Indicators>) => { -row.OBS_VALUE }).first()"
          unnest_formula: false
          parametrize_by: [ Country, Year ]
          expected_value_type: row_ref<Indicators>
  - ToolMessage:
      content: |-
        Field HighestIndicator created. Field value type: row_ref<Indicators>.
  - AIMessage:
      content: |-
        Now, we need to unpack needed values from row_refs into separate field to provide direct access to requested values.
      tool:
        name: create_field
        args:
          table_name: CountryYearIndicators
          create_table: false
          field_name: IndicatorName
          field_formula: "Indicator.'INDICATOR.Name'"
          unnest_formula: false
          parametrize_by: [ Indicator ]
          expected_value_type: string
  - ToolMessage:
      content: |-
        Field IndicatorName created. Field value type: string.
  - AIMessage:
      content: ""
      tool:
        name: create_field
        args:
          table_name: CountryYearIndicators
          create_table: false
          field_name: IndicatorValue
          field_formula: "Indicator.'OBS_VALUE'"
          unnest_formula: false
          parametrize_by: [ Indicator ]
          expected_value_type: number
  - ToolMessage:
      content: |-
        Field IndicatorValue created. Field value type: number.
  - AIMessage:
      content: |-
        Table CountryYearIndicators contains answer to the user question: references to relevant rows from Indicator table as well as fields with explicit indicator names and values.
